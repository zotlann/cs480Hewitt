#version 330

in vec3 normal;
in vec3 world_position;
in vec2 texture_coordinates;

uniform vec3 viewPos;
uniform vec3 AmbientLightPosition;
uniform vec3 AmbientLightColor;
uniform float AmbientLightIntensity;
uniform float SpecularIntensity;

uniform float shininess;

uniform sampler2D gSampler;

out vec4 frag_color; 

void main()
{
  vec3 eye = viewPos - world_position;
  vec3 N = normalize(normal);
  vec3 L = normalize(AmbientLightPosition.xyz);
  vec3 E = normalize(eye);
  vec3 H = normalize(L+E);

  vec4 ambient = vec4(AmbientLightColor,1.0) * AmbientLightIntensity;
  float Kd = max(dot(L,N),0.0);
  vec4 diffuse = Kd * vec4(AmbientLightColor, 1.0);
  float Ks = pow(max(dot(E,H),0.0),shininess);
  vec4 specular = Ks * vec4(AmbientLightColor, 1.0) * SpecularIntensity;

  vec4 color = ambient + specular + diffuse;
  color.a = 1.0;

  frag_color = color * texture2D(gSampler,texture_coordinates.xy);
}
