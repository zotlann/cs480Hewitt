#version 330

in vec3 normal;
in vec3 world_position;
in vec2 texture_coordinates;

uniform vec3 viewPos;
uniform vec3 AmbientLightPosition;
uniform vec3 AmbientLightColor;
uniform float AmbientLightIntensity;
uniform float SpecularIntensity;
uniform vec3 spotlightPosition;
uniform vec3 spotlightDirection;
uniform vec3 spotlightColor;
uniform float spotlightIntensity;
uniform float spotlightCutoff;

uniform float shininess;

uniform sampler2D gSampler;

out vec4 frag_color; 

void main()
{
  vec3 eye = viewPos - world_position;
  vec3 N = normalize(normal);
  vec3 L = normalize(AmbientLightPosition.xyz - world_position);
  vec3 E = normalize(eye);
  vec3 H = normalize(L+E);

  vec4 ambient = vec4(AmbientLightColor,1.0) * AmbientLightIntensity;
  float Kd = max(dot(L,N),0.0);
  vec4 diffuse = Kd * vec4(AmbientLightColor, 1.0);
  float Ks = pow(max(dot(E,H),0.0),shininess);
  vec4 specular = Ks * vec4(AmbientLightColor, 1.0) * SpecularIntensity;

  L = normalize(spotlightPosition - world_position);
  H = normalize(L+E);
  vec3 SD = normalize(spotlightDirection);

  vec3 lightDirection = world_position - spotlightPosition;
  vec4 pointlightColor = vec4(0,0,0,0);
  vec3 LD = normalize(lightDirection);

  if(dot(SD, LD) > spotlightCutoff)
  {
    float spotlightKd = max(dot(L, N), 0.0);
    float spotlightKs = pow(max(dot(E, H), 0.0), shininess);
    float distance = length(lightDirection);
    lightDirection = normalize(lightDirection);
    float attenuation = 1.0 / (1.0 + 1.0 * distance + 1.0 * (distance * distance));
    
    vec4 spotlightAmbient = vec4(spotlightColor,1.0) * spotlightIntensity;
    vec4 spotlightDiffuse = spotlightKd * vec4(spotlightColor,1.0) * spotlightIntensity;
    vec4 spotlightSpecular = spotlightKs * vec4(spotlightColor,1.0) * SpecularIntensity * spotlightIntensity;

    pointlightColor = spotlightAmbient + spotlightDiffuse + spotlightSpecular;

    pointlightColor *= attenuation;
  }

  vec4 color = max(ambient + specular + diffuse, pointlightColor);
  color.a = 1.0;

  frag_color = color * texture2D(gSampler,texture_coordinates.xy);
}
