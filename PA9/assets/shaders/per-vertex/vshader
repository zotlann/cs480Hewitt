#version 330

layout (location = 0) in vec3 v_position;
layout (location = 1) in vec2 v_texture_coordinates;
layout (location = 2) in vec3 v_normal;

out vec2 texture_coordinates;
out vec4 color;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec3 AmbientLightPosition;
uniform vec3 AmbientLightColor;
uniform float AmbientLightIntensity;
uniform vec3 spotlightPosition;
uniform vec3 spotlightDirection;
uniform vec3 spotlightColor;
uniform float spotlightIntensity;
uniform float spotlightCutoff;

uniform float shininess;

void main(void){
  vec3 pos = (modelViewMatrix * vec4(v_position,1.0)).xyz;
  gl_Position = (projectionMatrix * modelViewMatrix) * vec4(v_position,1.0);

  vec3 L = normalize(AmbientLightPosition.xyz - pos);
  vec3 E = normalize(vec3(0,0,0) - (modelViewMatrix * vec4(v_position, 1.0)).xyz);
  vec3 H = normalize(L+E);

  vec3 N = normalize(modelViewMatrix * vec4(v_normal,0.0)).xyz;

  vec4 ambient = AmbientProduct;
  ambient *= vec4(AmbientLightColor,1.0) * AmbientLightIntensity;
  float Kd = max(dot(L,N),0.0);
  vec4 diffuse = Kd*DiffuseProduct;
  float Ks = pow(max(dot(N,H),0.0),shininess);
  vec4 specular = Ks* SpecularProduct;

  L = normalize((modelViewMatrix * vec4(spotlightPosition,1.0))).xyz;
  H = normalize(L+E);
  
  Kd = max(dot(N,L),0);
  Ks = pow(max(dot(E,H),0),shininess);
  float diff = 1;

  float theta = dot(normalize(spotlightPosition),spotlightDirection);
  if(theta > spotlightCutoff){
    diffuse += vec4(spotlightColor,1.0) * spotlightIntensity * Kd * diff;
    specular += vec4(spotlightColor,1.0) * spotlightIntensity * Ks * diff;
  }
  color = specular + diffuse + ambient;
  color.a = 1.0;

  texture_coordinates = v_texture_coordinates;
}
