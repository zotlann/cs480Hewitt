#version 330

in vec3 fN;
in vec3 fL;
in vec3 fE;
in vec2 texture_coordinates;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec3 AmbientLightPosition;
uniform vec3 AmbientLightColor;
uniform float AmbientLightIntensity;
uniform vec3 spotlightPosition;
uniform vec3 spotlightDirection;
uniform vec3 spotlightColor;
uniform float spotlightIntensity;
uniform float spotlightCutoff;

uniform float shininess;

uniform sampler2D gSampler;

void main()
{
    vec3 N = normalize(fN);
    vec3 E = normalize(fE);
    vec3 L = normalize(fL);
    vec3 H = normalize(L + E);

    vec4 ambient = AmbientProduct;
    ambient *= vec4(AmbientLightColor, 1.0) * AmbientLightIntensity;

    float Kd = max(dot(L, N), 0.0);
    vec4 diffuse = Kd * DiffuseProduct;
    
    float Ks = pow(max(dot(N, H), 0.0), shininess);
    vec4 specular = Ks * SpecularProduct;

    if( dot(L,N) < 0.0)
    specular = vec4(0.0,0.0,0.0,1.0);

    L = normalize((modelViewMatrix * vec4(spotlightPosition,1.0))).xyz;
    H = normalize(L + E);

    Kd = max(dot(N,L), 0);
    Ks = pow(max(dot(E,H), 0), shininess);
    float diff = 1;

    float theta = dot(normalize(spotlightPosition), spotlightDirection);
    if(theta > spotlightCutoff)
    {
        diffuse += vec4(spotlightColor, 1.0) * spotlightIntensity * Kd * diff;
        specular += vec4(spotlightColor, 1.0) * spotlightIntensity * Ks * diff;
    }

    gl_FragColor = (ambient + diffuse + specular) * texture2D(gSampler, texture_coordinates.xy);
    gl_FragColor.a = 1.0;
}