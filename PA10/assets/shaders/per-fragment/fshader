#version 330

in vec3 normal;
in vec3 world_position;
in vec3 eye;
in vec2 texture_coordinates;

uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec3 AmbientLightPosition;
uniform vec3 AmbientLightColor;
uniform float AmbientLightIntensity;
uniform vec3 spotlightPosition;
uniform vec3 spotlightDirection;
uniform vec3 spotlightColor;
uniform float spotlightIntensity;
uniform float spotlightCutoff;

uniform float shininess;

uniform sampler2D gSampler;

out vec4 frag_color; 

void main()
{
  vec3 N = normalize(normal);
  vec3 L = normalize(AmbientLightPosition - world_position);
  vec3 E = normalize(eye);
  vec3 H = normalize(L+E);

  vec4 ambient = AmbientProduct;
  ambient *= vec4(AmbientLightColor,1.0) * AmbientLightIntensity;
  float Kd = max(dot(L,N),0);
  vec4 diffuse = Kd*DiffuseProduct*AmbientLightIntensity;
  float Ks = pow(max(dot(N,H),0),shininess);
  vec4 specular = Ks*SpecularProduct*AmbientLightIntensity;

  L = normalize(spotlightPosition - world_position);
  H = normalize(L+E);

  Kd = max(dot(N,L),0);
  Ks = pow(max(dot(E,H),0),shininess);

  float theta = dot(normalize(world_position - spotlightPosition),spotlightDirection);
  if(theta > spotlightCutoff){
    diffuse += vec4(spotlightColor,1.0) * spotlightIntensity * Kd;
    specular += vec4(spotlightColor,1.0) * spotlightIntensity * Ks;
  }
  
  vec4 color = ambient + specular + diffuse;
  color.a = 1.0;

  frag_color = color * texture2D(gSampler,texture_coordinates.xy);
}
